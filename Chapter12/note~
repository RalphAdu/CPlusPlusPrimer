1.构造函数一般应用一个构造函数初始化列表来初始化对象的数据成员。
2.构造函数不能为const。
3.可以认为够在函数分两个阶段执行：（1）初始化阶段；（2）普通计算阶段，计算阶段由构造函数函数体中所有语句组成。
4.不管成员是否在构造函数初始化列表中显示初始化，类类型的数据成员总是在初始化阶段初始化，初始化发生在计算阶段开始之前。
5.使用构造函数初始化列表的版本初始化数据成员，没有定义初始化列表的构造函数版本在构造函数函数体中对数据成员赋值。
6.没有默认构造函数的类类型的成员，以及const或引用类型的成员，不管是哪种类型，都必须在构造函数初始化列表中进行初始化。
7.构造函数初始化列表中成员初始化的次序为成员定义的次序。所以应按照声明的次序来编写构造函数初始化列表，尽可能避免使用一个成员来初始化其他成员。
8.没有声明为explicit的单形参构造函数可以隐式的将形参转换为该类类型的对象，当构造函数声明为explicit时则不能隐式转换，该关键字只能用于类的构造函数声明上，在类的定义体外部所做的定义不再重复它。
通常，除非有明显的理由想要定义隐式转换，否则，单形参构造函数应该为explicit。
9.常量成员函数（将const加在形参表后面）不能修改对象的数据成员值。const必须同时出现在声明和定义中。
10.如果是struct定义的类，则在第一个访问标号之前的成员是公有的，而class定义的类，这些成员是私有的。
11.可以在类定义体内指定一个成员为inline，作为其声明的一部分，也可以在类定义体外部函数定义上指定inline。不在类定义体内定义的inline成员函数，其定义通常应放在有类定义的同一头文件中。
12.不完全类型（只声明而不定义一个类）不能定义该类的对象。只能用于定义指向该类型的指针或者引用，或者声明（而不是定义）使用该类型作为形参类型或返回类型的函数。
13.类可以有自身类型的指针或引用类型的数据成员，不能具有自身类型的数据成员，但可以有自身类型的static数据成员。
14.普通的非const成员函数，this的类型是一个指向类类型的const指针，而const成员函数中this类型是一个指向const类类型对象的const指针。const成员函数只能返回*this作为一个const引用。
15.基于一个成员函数是否为const可以重载一个成员函数；同样的，基于一个指针形参是否指向const也可以重载一个函数。
16.mutable放在成员声明之前表示该数据成员是可变的，其永远不能为const，甚至当它是const对象的成员也是如此，const对象和const成员函数都可以改变mutable成员的值。
17.如果函数在类定义体之外定义，则用于返回类型的名字在类作用域外，如果返回类型使用由类定义的类型，则必须使用完全限定名。
18.友元（friend）机制允许一个类将对其非公有成员的访问授予指定的函数或类，friend关键字只能出现在类定义的内部。通常将友元声明成组的放在类定义的开始或结尾。
19.必须先定义包含成员函数的类，才能将成员函数设为友元。
20.友元声明将已命名的类或成员函数引入到外围作用域中。友元函数可以在类的内部定义，该函数的作用域扩展到包围该类定义的作用域。
21.static成员函数能直接访问类的static成员，不能直接访问非static成员。
22.static成员不是任何对象的一部分，所以static成员函数不能声明为const，也不能声明为需函数。
23.static数据成员必须在类定义体外部定义（正好一次），不是通过类构造函数初始化，应该在定义的时候初始化。保证对象正好定义一次的最好办法，就是将static数据成员的定义放在包含类的非内联成员函数定义的文件中。
24.const static成员可以在类的定义体中进行初始化，初始化后数据成员仍必须在类的定义体之外进行定义，但这次不必指明其初始值。

